name: Clang Windows build

on: [push]
#    branches: [master]
env:
  CMAKE_VERSION: 3.16.2
  NINJA_VERSION: 1.10.0

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            build_type: Release,
            cxx: "cl",
            llvm_version: "14.0.0",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
          }

    steps:
    - uses: actions/checkout@v2
      with:
        repository: 'llvm/llvm-project'
        ref: 'llvmorg-${{ matrix.config.llvm_version }}'
        path: 'llvm-project'

    - name: Download Ninja and CMake
      id: cmake_and_ninja_setup
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "win64-x64.zip")
          set(cmake_base_dir "cmake-${cmake_version}-win64-x64")
          set(cmake_dir "${cmake_base_dir}/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "Linux-x86_64.tar.gz")
          set(cmake_base_dir "cmake-${cmake_version}-Linux-x86_64")
          set(cmake_dir "${cmake_base_dir}/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "Darwin-x86_64.tar.gz")
          set(cmake_base_dir "cmake-${cmake_version}-Darwin-x86_64")
          set(cmake_dir "${cmake_base_dir}/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        message("::set-output name=ninja_url::${ninja_url}")

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        message("::set-output name=cmake_url::${cmake_url}")

        # preserve it for the next steps
        message("::set-output name=cmake_dir::${cmake_dir}")

        # preserve it for the next steps
        message("::set-output name=cmake_base_dir::${cmake_base_dir}")

    - name: Download Ninja and CMake
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        set(ninja_url "${{ steps.cmake_and_ninja_setup.outputs.ninja_url }}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./ninja.zip)
        execute_process(COMMAND ${CMAKE_COMMAND} -E remove ./ninja.zip)

        set(cmake_url "${{ steps.cmake_and_ninja_setup.outputs.cmake_url }}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./cmake.zip)
        execute_process(COMMAND ${CMAKE_COMMAND} -E remove ./cmake.zip)

        set(cmake_dir "${{ steps.cmake_and_ninja_setup.outputs.cmake_dir }}")
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Setup MSVC Dev
      uses: ilammy/msvc-dev-cmd@v1

    - name: Show
      shell: bash
      run: |
          ls -l

    - name: Configure
      id: cmake_configure
      shell: cmake -P {0}
      run: |
        set(ENV{CXX} ${{ matrix.config.cxx }})
        if ("${{ runner.os }}" STREQUAL "macOS")
          set(ENV{SDKROOT} "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk")
        endif()

        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(WRITE "$ENV{GITHUB_PATH}"  "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

        execute_process(
          COMMAND ${{ steps.cmake_and_ninja_setup.outputs.cmake_dir }}/cmake
            -S $ENV{GITHUB_WORKSPACE}/llvm-project/llvm
            -B build
            -G "Ninja"
            -D CMAKE_BUILD_TYPE=Release
            -D LLVM_ENABLE_ASSERTIONS=OFF
            -D CLANG_ENABLE_STATIC_ANALYZER=OFF
            -D CLANG_ENABLE_ARCMT=OFF
            -D CMAKE_INSTALL_UCRT_LIBRARIES=ON
            -D LLVM_INCLUDE_EXAMPLES=OFF
            -D LLVM_INCLUDE_TESTS=OFF
            -D CLANG_INCLUDE_TESTS=OFF
            -D "LLVM_ENABLE_PROJECTS=clang;compiler-rt"
            -D "CMAKE_INSTALL_PREFIX=$ENV{GITHUB_WORKSPACE}/installed"
            -D "CMAKE_MAKE_PROGRAM:STRING=$ENV{GITHUB_WORKSPACE}/ninja"
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit from cmake configure status")
        endif()

    - name: Build
      shell: cmake -P {0}
      continue-on-error: false
      run: |
        execute_process(
          COMMAND ${{ steps.cmake_and_ninja_setup.outputs.cmake_dir }}/cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Install
      shell: cmake -P {0}
      continue-on-error: false
      run: |
        file(MAKE_DIRECTORY "$ENV{GITHUB_WORKSPACE}/installed")
        execute_process(
          COMMAND ${{ steps.cmake_and_ninja_setup.outputs.cmake_dir }}/cmake --build build --config Release --target install
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Show
      shell: bash
      run: |
          rm -rf build # we need disk space
          ls -l installed

    - name: Create archive
      id: install_clang_10
      shell: cmake -P {0}
      run: |
        set(llvm_version ${{ matrix.config.llvm_version }})
        set(path_separator ";")

        file(MAKE_DIRECTORY "$ENV{GITHUB_WORKSPACE}/archive")
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar cvz "$ENV{GITHUB_WORKSPACE}/archive/llvm+clang-${{ matrix.config.llvm_version }}-win64-msvc-release.tar.xz" -- "$ENV{GITHUB_WORKSPACE}/installed/")

        # Fetch LLVM/clang from LLVM for macOS
        file(DOWNLOAD "https://github.com/llvm/llvm-project/releases/download/llvmorg-${llvm_version}/clang+llvm-${llvm_version}-x86_64-apple-darwin.tar.xz" "$ENV{GITHUB_WORKSPACE}/archive/clang+llvm-${llvm_version}-x86_64-apple-darwin.tar.xz")

    - name: Upload binary to GH
      uses: svenstaro/upload-release-action@v2
      with:
        file: ${{ github.workspace }}/archive/*.xz
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ matrix.config.llvm_version }}
        overwrite: false
        file_glob: true
