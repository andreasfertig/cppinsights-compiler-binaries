name: Clang Windows compiler-rt build

on: [push]
#    branches: [master]
env:
  CMAKE_VERSION: 3.16.2

jobs:
  fetchbin:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            llvm_version: "13.0.0",
            llvm_major_version: "13",
            llvm_config: "current/bin/llvm-config.exe",
          }

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Download CMake
      id: cmake_setup
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        set(cmake_suffix "win64-x64.zip")
        set(cmake_base_dir "cmake-${cmake_version}-win64-x64")
        set(cmake_dir "${cmake_base_dir}/bin")

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        message("::set-output name=cmake_url::${cmake_url}")

        # preserve it for the next steps
        message("::set-output name=cmake_dir::${cmake_dir}")

        # preserve it for the next steps
        message("::set-output name=cmake_base_dir::${cmake_base_dir}")


    - name: Download CMake
      shell: cmake -P {0}
      run: |
        set(cmake_url "${{ steps.cmake_setup.outputs.cmake_url }}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./cmake.zip)
        #        execute_process(COMMAND ${CMAKE_COMMAND} -E remove ./cmake.zip)

        set(cmake_dir "${{ steps.cmake_setup.outputs.cmake_dir }}")

    - name: Fetch LLVM from ziglang and LLVM
      id: install_clang_10
      shell: cmake -P {0}
      run: |
        set(llvm_version ${{ matrix.config.llvm_version }})
        set(archive_name "llvm+clang+lld-${llvm_version}-x86_64-windows-msvc-release-mt.tar.xz")
        set(path_separator ";")

        file(MAKE_DIRECTORY "$ENV{GITHUB_WORKSPACE}/build/archive")
        file(DOWNLOAD "https://ziglang.org/deps/${archive_name}" "$ENV{GITHUB_WORKSPACE}/build/archive/${archive_name}")

        file(DOWNLOAD "https://github.com/llvm/llvm-project/releases/download/llvmorg-${llvm_version}/clang+llvm-${llvm_version}-x86_64-apple-darwin.tar.xz" "$ENV{GITHUB_WORKSPACE}/build/archive/clang+llvm-${llvm_version}-x86_64-apple-darwin.tar.xz")

    - name: Upload binary to GH
      uses: svenstaro/upload-release-action@v2
      with:
        file: ${{ github.workspace }}/build/archive/*.tar.xz
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ matrix.config.llvm_version }}
        overwrite: false
        file_glob: true
#------------------------------------------------------------------------------------------------

  build:
    needs: fetchbin
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-latest,
            llvm_version: "13.0.0",
            llvm_config: "current/bin/llvm-config.exe",
          }

    steps:
    - uses: actions/checkout@v2
      with:
        repository: 'llvm/llvm-project'
        ref: 'llvmorg-${{ matrix.config.llvm_version }}'
        path: 'llvm-project'

    - name: Download Ninja and CMake
      id: cmake_setup
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        set(ninja_suffix "win.zip")
        set(cmake_suffix "win64-x64.zip")
        set(cmake_base_dir "cmake-${cmake_version}-win64-x64")
        set(cmake_dir "${cmake_base_dir}/bin")

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        message("::set-output name=cmake_url::${cmake_url}")

        # preserve it for the next steps
        message("::set-output name=cmake_dir::${cmake_dir}")

        # preserve it for the next steps
        message("::set-output name=cmake_base_dir::${cmake_base_dir}")


    - name: Download CMake
      shell: cmake -P {0}
      run: |
        set(cmake_url "${{ steps.cmake_setup.outputs.cmake_url }}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./cmake.zip)
        #        execute_process(COMMAND ${CMAKE_COMMAND} -E remove ./cmake.zip)

        set(cmake_dir "${{ steps.cmake_setup.outputs.cmake_dir }}")

    - name: Install Clang 10
      id: install_clang_10
      shell: cmake -P {0}
      run: |
        set(llvm_version ${{ matrix.config.llvm_version }})
        set(archive_name "llvm+clang+lld-${llvm_version}-x86_64-windows-msvc-release-mt")
        set(path_separator ";")

        file(DOWNLOAD "https://github.com/andreasfertig/cppinsights-compiler-binaries/releases/download/${llvm_version}/${archive_name}.tar.xz" ./llvm.tar.xz)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ./llvm.tar.xz)
        execute_process(COMMAND ${CMAKE_COMMAND} -E remove ./llvm.tar.xz)
        execute_process(COMMAND ${CMAKE_COMMAND} -E rename "./${archive_name}" "./current")

    - name: Setup MSVC Dev
      uses: ilammy/msvc-dev-cmd@v1

    - name: Show
      shell: bash
      run: |
          ls -l

    - name: Configure
      id: cmake_configure
      shell: cmake -P {0}
      run: |
        # ${{ steps.cmake_setup.outputs.cmake_dir }}/cmake -S llvm-project/compiler-rt -B build -D "LLVM_CONFIG_PATH=$ENV{GITHUB_WORKSPACE}/current/bin/llvm-config.exe"
        execute_process(
          COMMAND ${{ steps.cmake_setup.outputs.cmake_dir }}/cmake
            -S llvm-project/compiler-rt
            -B build
            -D "LLVM_CONFIG_PATH=$ENV{GITHUB_WORKSPACE}/current/bin/llvm-config.exe"
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit from cmake configure status")
        endif()

    - name: Build
      shell: cmake -P {0}
      continue-on-error: false
      run: |
        execute_process(
          COMMAND ${{ steps.cmake_setup.outputs.cmake_dir }}/cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Create archive
      shell: cmake -P {0}
      working-directory: ${{ github.workspace }}/build
      continue-on-error: false
      run: |
        file(MAKE_DIRECTORY "$ENV{GITHUB_WORKSPACE}/build/archive")
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar cvz "$ENV{GITHUB_WORKSPACE}/build/archive/compiler-rt-${{ matrix.config.llvm_version }}.zip" -- "lib/windows")
        #        file(SHA256 "$ENV{GITHUB_WORKSPACE}/build/${{ matrix.config.bin_name }}" CHKSM)
        #file(WRITE "$ENV{GITHUB_WORKSPACE}/build/archive/${{ matrix.config.archive_name }}.sha256" ${CHKSM})

    - uses: actions/upload-artifact@v2
      with:
        name: compiler-rt-artifact-${{ matrix.config.os }}
        if-no-files-found: error
        path: |
            ${{ github.workspace }}/build/archive/*

    - name: Upload binary to GH
      uses: svenstaro/upload-release-action@v2
      with:
        file: ${{ github.workspace }}/build/archive/*
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ matrix.config.llvm_version }}
        overwrite: false
        file_glob: true
