name: Clang Windows build

on: [push]
#    branches: [master]
env:
  CMAKE_VERSION: 3.16.2
  NINJA_VERSION: 1.10.0

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows",
            os: windows-2022,
            build_type: Release,
            cxx: "cl",
            cc: "cl",
            llvm_version: "15.0.0",
          }

    steps:
    - name: Setup MSVC Dev
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: x64

    - name: Install Ninja
      uses: llvm/actions/install-ninja@main

    - uses: actions/checkout@v2
      with:
        repository: 'llvm/llvm-project'
        ref: 'llvmorg-${{ matrix.config.llvm_version }}'
        path: 'llvm-project'

    - name: Configure
      env:
        INSTALLDIR: ${{ github.workspace }}/clang+llvm-${{ matrix.config.llvm_version }}-win64-msvc
      run: |
        mkdir clang+llvm-${{ matrix.config.llvm_version }}-win64-msvc
        cmake -S $env:GITHUB_WORKSPACE/llvm-project/llvm -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=OFF -DCLANG_ENABLE_STATIC_ANALYZER=OFF -DCLANG_ENABLE_ARCMT=OFF -DCMAKE_INSTALL_UCRT_LIBRARIES=ON -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DCLANG_INCLUDE_TESTS=OFF -DLLVM_ENABLE_PROJECTS="clang;compiler-rt" -DCMAKE_INSTALL_PREFIX="$env:INSTALLDIR" -DLLVM_USE_CRT_DEBUG=MTd -DLLVM_USE_CRT_RELEASE=MT

    - name: Build
      continue-on-error: false
      run: |
        # Make sure all of LLVM libraries that llvm-config needs are built.
        ninja -C build
        ninja -C build install

    - name: Show
      shell: bash
      run: |
          ls -l

    - name: Free disk space
      shell: bash
      run: |
          rm -rf build # we need disk space

    - name: Create archive
      id: install_clang
      shell: cmake -P {0}
      run: |
        set(llvm_version ${{ matrix.config.llvm_version }})
        set(path_separator ";")

        file(MAKE_DIRECTORY "$ENV{GITHUB_WORKSPACE}/archive")
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar cvz "$ENV{GITHUB_WORKSPACE}/archive/clang+llvm-${{ matrix.config.llvm_version }}-win64-msvc.tar.xz" -- "$ENV{GITHUB_WORKSPACE}/clang+llvm-${{ matrix.config.llvm_version }}-win64-msvc/")

        # Fetch LLVM/clang from LLVM for macOS
        file(DOWNLOAD "https://github.com/llvm/llvm-project/releases/download/llvmorg-${llvm_version}/clang+llvm-${llvm_version}-x86_64-apple-darwin.tar.xz" "$ENV{GITHUB_WORKSPACE}/archive/clang+llvm-${llvm_version}-x86_64-apple-darwin.tar.xz")

    - name: Upload binary to GH
      uses: svenstaro/upload-release-action@v2
      with:
        file: ${{ github.workspace }}/archive/*.xz
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ matrix.config.llvm_version }}
        overwrite: false
        file_glob: true
